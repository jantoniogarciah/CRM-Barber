// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("CLIENT") // ADMIN, ADMINBARBER, BARBER, CLIENT
  status    String   @default("ACTIVE") // ACTIVE, INACTIVE
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Client {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String   @unique
  notes     String?
  status    String   @default("ACTIVE")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  appointments Appointment[]
  servicesLog  ServiceLog[]
  sales        Sale[]

  @@map("clients")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int      @default(30)
  categoryId  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category     Category      @relation(fields: [categoryId], references: [id])
  appointments Appointment[]
  servicesLog  ServiceLog[]
  sales        Sale[]

  @@index([categoryId])
  @@map("services")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]

  @@map("categories")
}

model Barber {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?  @unique
  phone     String
  instagram String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  appointments Appointment[]
  servicesLog  ServiceLog[]
  sales        Sale[]

  @@map("barbers")
}

model Appointment {
  id        String   @id @default(cuid())
  clientId  String
  serviceId String
  barberId  String
  date      DateTime
  time      String
  status    String   @default("pending") // pending, confirmed, completed, cancelled
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client  Client  @relation(fields: [clientId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
  barber  Barber  @relation(fields: [barberId], references: [id])

  @@index([clientId])
  @@index([serviceId])
  @@index([barberId])
  @@map("appointments")
}

model ServiceLog {
  id        String   @id @default(cuid())
  clientId  String
  serviceId String
  barberId  String
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client  Client  @relation(fields: [clientId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
  barber  Barber  @relation(fields: [barberId], references: [id])

  @@index([clientId])
  @@index([serviceId])
  @@index([barberId])
  @@map("service_logs")
}

model Sale {
  id           String   @id @default(cuid())
  clientId     String
  serviceId    String
  barberId     String
  amount       Float
  status       String   @default("completed") // completed, cancelled, refunded
  paymentMethod String   @default("EFECTIVO") // EFECTIVO, DEBITO, CREDITO
  notes        String?
  saleDate     DateTime @default(now()) // Fecha de venta que puede ser modificada
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  client  Client  @relation(fields: [clientId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])
  barber  Barber  @relation(fields: [barberId], references: [id])

  @@index([clientId])
  @@index([serviceId])
  @@index([barberId])
  @@map("sales")
} 