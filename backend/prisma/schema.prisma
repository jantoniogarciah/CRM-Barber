// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  BARBER
  CLIENT
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  phone     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Additional fields for barbers
  specialties String[]  @default([])
  schedule    Json?     // Store working hours and availability
  rating      Float?    @default(0)
  isBarber    Boolean   @default(false)

  @@map("users")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  services    Service[]

  @@map("categories")
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String
  duration    Int      // Duration in minutes
  price       Float
  image       String?  // URL to service image
  isActive    Boolean  @default(true)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  appointments Appointment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("services")
}

model Client {
  id          String        @id @default(uuid())
  firstName   String
  lastName    String
  email       String?
  phone       String        @unique
  notes       String?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  appointments Appointment[]

  @@map("clients")
}

model Barber {
  id          String        @id @default(uuid())
  firstName   String
  lastName    String
  phone       String
  email       String?
  instagram   String?
  isActive    Boolean       @default(true)
  appointments Appointment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("barbers")
}

model Appointment {
  id        String   @id @default(uuid())
  clientId  String
  serviceId String
  barberId  String
  date      String
  time      String
  status    String   @default("pending")
  notes     String?
  client    Client   @relation(fields: [clientId], references: [id])
  service   Service  @relation(fields: [serviceId], references: [id])
  barber    Barber   @relation(fields: [barberId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
} 